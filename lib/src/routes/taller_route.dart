// GENERATED CODE - DO NOT MODIFY MANUALLY
// **************************************************************************
// Auto generated by https://github.com/fluttercandies/ff_annotation_route
// **************************************************************************
// fast mode: true
// **************************************************************************
// ignore_for_file: prefer_const_literals_to_create_immutables,unused_local_variable,unused_import,unnecessary_import,unused_shown_name,implementation_imports,duplicate_import
import 'package:ff_annotation_route_library/ff_annotation_route_library.dart';
import 'package:flutter/widgets.dart';

import '../presentation/add_conversation/add_conversation_page.dart';
import '../presentation/complete_profile/complete_profile.dart';
import '../presentation/conversation/conversation_page.dart';
import '../presentation/login/login_page.dart';
import '../presentation/profile/profile_page.dart';
import '../presentation/register/register_page.dart';
import '../presentation/root/root_page.dart';
import '../presentation/splash/splah_page.dart';

/// Get route settings base on route name, auto generated by https://github.com/fluttercandies/ff_annotation_route
FFRouteSettings getRouteSettings({
  required String name,
  Map<String, dynamic>? arguments,
  PageBuilder? notFoundPageBuilder,
}) {
  final Map<String, dynamic> safeArguments =
      arguments ?? const <String, dynamic>{};
  switch (name) {
    case '/addConversation':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => AddUserPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/app':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => RootPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
        routeName: '/app',
      );
    case '/completeProfile':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => CompleteProfile(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/conversation':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => ConversationPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/login':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => LoginPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/profile':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => ProfilePage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/signup':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => RegisterPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/splash':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => SplashPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    default:
      return FFRouteSettings(
        name: FFRoute.notFoundName,
        routeName: FFRoute.notFoundRouteName,
        builder: notFoundPageBuilder ?? () => Container(),
      );
  }
}
